import{B as i,D as l,E as O,bw as P,eQ as E,cq as T,ei as F,cu as N,cF as D,cs as _,ct as J,cv as M,cr as R,cH as j,cG as U,aK as V,cT as S,c$ as f,df as q,U as b,aZ as A,dG as k,fb as H,s as x,aU as C,em as I,aS as G,d2 as Z,cy as z,cE as B,ey as K}from"../base-unit-tools.js";import{t as W}from"./loadAll-BjG_8js_.js";import{d as Q,i as X}from"./scaleUtils-C1n_TPKf.js";import{n as Y,m as ee,f as te,e as L,t as re}from"./SublayersOwner-S1ZGBaNP.js";import{t as ie}from"./imageBitmapUtils-BnfRVCHT.js";import"./CollectionFlattener-BzFs_gnq.js";import"./QueryTask-CVItuQ23.js";import"./infoFor3D-DsOdlPuA.js";import"./utils-DIqDM5ql.js";import"./executeQueryJSON-BdyQh2i2.js";import"./query-CQgFlWK7.js";import"./normalizeUtils-D9bgWdv2.js";import"./normalizeUtilsCommon-Ckjde9KV.js";import"./utils-ChAK3Vwv.js";import"./pbfQueryUtils-rCwn26NG.js";import"./pbf-Cy2JN24j.js";import"./OptimizedFeature-DDMKj8Vq.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./executeQueryPBF-BT41cuTe.js";import"./featureConversionUtils-kTWBACtS.js";function $(e,t){var s;return"floorInfo"in t&&((s=t.floorInfo)!=null&&s.floorField)?se(e,t.floorInfo.floorField):null}function se(e,t){if(!(e!=null&&e.length))return null;const s=e.filter(r=>r!=="").map(r=>`'${r}'`);return s.push("''"),`${t} IN (${s.join(",")}) OR ${t} IS NULL`}const ae={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let c=class extends P{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(t=>{const s=$(this.floors,t);return t.toExportImageJSON(s)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&Y(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",t=>this.notifyChange(ae[t.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(t=>t.id).join(","):"show:-1":null}get layerDefs(){var s;const e=!!((s=this.floors)!=null&&s.length),t=this.visibleSublayers.filter(r=>r.definitionExpression!=null||e&&r.floorInfo!=null);return t.length?JSON.stringify(t.reduce((r,o)=>{const a=$(this.floors,o),p=E(a,o.definitionExpression);return p!=null&&(r[o.id]=p),r},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const t=this.layer.sublayers,s=this.scale,r=a=>{a.visible&&(s===0||Q(s,a.minScale,a.maxScale))&&(a.sublayers?a.sublayers.forEach(r):e.unshift(a))};t&&t.forEach(r);const o=this._get("visibleSublayers");return!o||o.length!==e.length||o.some((a,p)=>e[p]!==a)?e:o}toJSON(){const e=this.layer;let t={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?t.dynamicLayers=this.dynamicLayers:t={...t,layers:this.layers,layerDefs:this.layerDefs},t}};i([l({readOnly:!0})],c.prototype,"dynamicLayers",null),i([l()],c.prototype,"floors",void 0),i([l({readOnly:!0})],c.prototype,"hasDynamicLayers",null),i([l()],c.prototype,"layer",null),i([l({readOnly:!0})],c.prototype,"layers",null),i([l({readOnly:!0})],c.prototype,"layerDefs",null),i([l({type:Number})],c.prototype,"scale",void 0),i([l({readOnly:!0})],c.prototype,"version",null),i([l({readOnly:!0})],c.prototype,"visibleSublayers",null),c=i([O("esri.layers.support.ExportImageParameters")],c);let n=class extends T(F(N(ee(te(D(_(J(M(R(j(U(B)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new c({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(V).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const s=t.supportedImageFormatTypes;return s&&s.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,s,r){var m,g,v;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:y})=>y&&y.toArray().reverse()).toArray();let a=!1;const p=S(r.origin);if((m=this.capabilities)!=null&&m.operations.supportsExportMap&&((v=(g=this.capabilities)==null?void 0:g.exportMap)!=null&&v.supportsDynamicLayers)){if(p===f.PORTAL_ITEM){const y=this.createSublayersForOrigin("service").sublayers;a=L(o,y,f.SERVICE)}else if(p>f.PORTAL_ITEM){const y=this.createSublayersForOrigin("portal-item");a=L(o,y.sublayers,S(y.origin))}}const u=[],d={writeSublayerStructure:a,...r};let h=a||this.hasVisibleLayersForOrigin(p);o.forEach(y=>{const w=y.write({},d);u.push(w),h=h||y.originOf("visible")==="user"}),u.some(y=>Object.keys(y).length>1)&&(t.layers=u),h&&(t.visibleLayers=o.filter(y=>y.visible).map(y=>y.id))}createExportImageParameters(e,t,s,r){const o=(r==null?void 0:r.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(r==null?void 0:r.floors)??null,this._exportImageParameters.scale=X({extent:e,width:t})*o;const a=this._exportImageParameters.toJSON(),p=!(r!=null&&r.rotation)||this.version<10.3?{}:{rotation:-r.rotation},u=e==null?void 0:e.spatialReference,d=q(u);a.dpi*=o;const h={};if(r!=null&&r.timeExtent){const{start:m,end:g}=r.timeExtent.toJSON();h.time=m&&g&&m===g?""+m:`${m??"null"},${g??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:t+","+s,...a,...p,...h}}async fetchImage(e,t,s,r){const{data:o}=await this._fetchImage("image",e,t,s,r);return o}async fetchImageBitmap(e,t,s,r){const{data:o,url:a}=await this._fetchImage("blob",e,t,s,r);return ie(o,a,r==null?void 0:r.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:s}=await b(this.url,t),{extent:r,fullExtent:o,timeExtent:a}=s,p=r||o;return{fullExtent:p&&A.fromJSON(p),timeExtent:a&&k.fromJSON({start:a[0],end:a[1]})}}loadAll(){return W(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return H(this,e)}async _fetchImage(e,t,s,r,o){var u,d,h;const a={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,s,r,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},p=this.parsedUrl.path+"/export";if(((u=a.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:m}=await b(p,a);return{data:m,url:p}}catch(m){throw C(m)?m:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:s}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});s&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var t;return!(e==null||!((t=this.sublayersSourceJSON[e])!=null&&t.visibleLayers))}};i([l(I("dateFieldsTimeReference"))],n.prototype,"dateFieldsTimeZone",void 0),i([l({type:Boolean})],n.prototype,"datesInUnknownTimezone",void 0),i([l()],n.prototype,"dpi",void 0),i([l()],n.prototype,"gdbVersion",void 0),i([l()],n.prototype,"imageFormat",void 0),i([G("imageFormat",["supportedImageFormatTypes"])],n.prototype,"readImageFormat",null),i([l({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],n.prototype,"imageMaxHeight",void 0),i([l({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],n.prototype,"imageMaxWidth",void 0),i([l()],n.prototype,"imageTransparency",void 0),i([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],n.prototype,"isReference",void 0),i([l({json:{read:!1,write:!1}})],n.prototype,"labelsVisible",void 0),i([l({type:["ArcGISMapServiceLayer"]})],n.prototype,"operationalLayerType",void 0),i([l({json:{read:!1,write:!1}})],n.prototype,"popupEnabled",void 0),i([l(I("preferredTimeReference"))],n.prototype,"preferredTimeZone",void 0),i([l()],n.prototype,"sourceJSON",void 0),i([l({json:{write:{ignoreOrigin:!0}}})],n.prototype,"sublayers",void 0),i([Z("sublayers",{layers:{type:[re]},visibleLayers:{type:[K]}})],n.prototype,"writeSublayers",null),i([l({type:["show","hide","hide-children"]})],n.prototype,"listMode",void 0),i([l({json:{read:!1},readOnly:!0,value:"map-image"})],n.prototype,"type",void 0),i([l(z)],n.prototype,"url",void 0),n=i([O("esri.layers.MapImageLayer")],n);const we=n;export{we as default};
