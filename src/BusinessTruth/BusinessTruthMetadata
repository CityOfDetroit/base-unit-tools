const businessLicenseMetadata = require('../data/metadata/BSEED_business_licenses_metadata.json');
const certificateOfOccupancyMetadata = require('../data/metadata/BSEED_certificate_of_occupancy_metadata.json');

let datasets = {
    "business_licenses": businessLicenseMetadata,
    "certificate_of_occupancy": certificateOfOccupancyMetadata
}

//TODO: refactor so datasetKey is passed to constructor
class BusinessTruthMetadata{
    constructor(name){
        //same keys as businessTruthTypes.js
        this.name = name
        this.data = datasets[name]
        /*
        this.data = {
            "business_licenses": businessLicenseMetadata
        }
        */
    }

    get fields(){
        // return json of column name: description
        let fieldMap = {};
        if(this.data){
            let fields = this.data.variableMeasured; // array of field descriptions
            fields.forEach(item => fieldMap[item.name] = item.description);
        }

        return fieldMap;
    }

    getFields(datasetKey){
        // return json of column name: description
        let fieldMap = {};
        let dataset = this.data[datasetKey];
        if(dataset){
            let fields = dataset.variableMeasured; // array of field descriptions

            fields.forEach(item => fieldMap[item.name] = item.description);
        }

        return fieldMap;
    }

    get description(){
        if(this.data){
            return this.data.description;
        }
        return null;
    }

    getDescription(datasetKey){
        if(this.data[datasetKey]){
            return this.data[datasetKey].description;
        }
        return null;
    }

    displayMetadata(displayNames){
        // metadata w/ keys as displayNames. pass in displayNames as a json
        let displayMetadata = {};
        if(this.fields){
            Object.keys(displayNames).forEach(k => {
                displayMetadata[k] = this.fields[displayNames[k]]
            })
        }
        return displayMetadata;
    }

    getDisplayMetadata(datasetKey, displayNames){
        // metadata w/ keys as displayNames. pass in displayNames as a json
        let displayMetadata = {};
        let fieldMap = this.getFields(datasetKey);
        Object.keys(displayNames).forEach(k => {
            displayMetadata[k] = fieldMap[displayNames[k]]
        })
        return displayMetadata;
    }
}

export default BusinessTruthMetadata  